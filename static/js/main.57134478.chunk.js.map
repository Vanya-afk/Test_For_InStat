{"version":3,"sources":["TodoListsList/TodoList/Todolist.module.css","TodoListsList/TodoList/Tasks/Task.module.css","app/App.module.css","TodoListsList/TodoList/Tasks/Task.tsx","store/tasks-reducer.ts","Components/AddItemForm.tsx","TodoListsList/TodoList/Todolist.tsx","app/App.tsx","store/store.ts","index.tsx"],"names":["module","exports","Task","React","memo","props","onClickHandler","useCallback","removeTask","id","onChangeHandler","e","newIsDoneValue","currentTarget","checked","changeTaskStatus","className","t","task","Checkbox","color","onChange","title","IconButton","onClick","Delete","initialTasks","initialState","allTasks","activeTasks","AddItemForm","useState","setTitle","error","setError","addItem","trim","addTask","style","fontSize","TextField","value","filteredTasks","onKeyPress","charCode","label","helperText","AddBox","Todolist","isActive","setIsActive","tasks","useSelector","state","dispatch","useDispatch","searchingValue","type","addTaskAC","taskId","changeStatus","updateTaskAC","S","AddItemFormBox","tasksBox","map","i","App","todoListContainer","Paper","padding","borderRadius","background","elevation","rootReducer","combineReducers","action","filter","newTask","Date","toString","toLowerCase","includes","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57134478.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksBox\":\"Todolist_tasksBox__3wUAN\",\"AddItemFormBox\":\"Todolist_AddItemFormBox__1j9Xs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__Jnpzx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListContainer\":\"App_todoListContainer__27YTF\"};","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport t from './Task.module.css'\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    title: string\r\n    checked: boolean\r\n    changeTaskStatus: (id: string, checked: boolean) => void\r\n    removeTask: (id: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        props.removeTask(props.id)\r\n    }, [props])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.id, newIsDoneValue)\r\n    }, [props]);\r\n\r\n    return <div className={t.task}>\r\n        <Checkbox\r\n            checked={props.checked}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n        <p>{props.title}</p>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","const initialTasks = [\r\n    {id: '0', title: 'Hello', checked: false},\r\n    {id: '1', title: 'React', checked: false},\r\n    {id: '2', title: 'Js', checked: true}]\r\n\r\nconst initialState = {\r\n    allTasks: initialTasks,\r\n    activeTasks: initialTasks\r\n}\r\n\r\nexport type TaskType = {\r\n    title: string\r\n    checked: boolean\r\n    id: string\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                allTasks: state.allTasks.filter(t => t.id !== action.taskId),\r\n                activeTasks: state.activeTasks.filter(t => t.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            const newTask: TaskType = {\r\n                id: new Date().toString(),\r\n                title: action.title,\r\n                checked: false\r\n            }\r\n            return {\r\n                allTasks: [...state.allTasks, newTask],\r\n                activeTasks: [newTask, ...state.activeTasks]\r\n            }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                allTasks: state.allTasks.map(t => t.id === action.taskId ? {...t, checked: action.checked} : t),\r\n                activeTasks:  state.activeTasks.map(t => t.id === action.taskId ? {...t, checked: action.checked} : t)\r\n            }\r\n        case 'FIND-TASK':\r\n            const activeTasks = state.allTasks.filter(t => t.title.toLowerCase().trim().includes(action.title.toLowerCase().trim()))\r\n            return {\r\n                ...state, activeTasks\r\n            }\r\n        case 'SET-TASKS':\r\n            return initialState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId} as const)\r\nexport const addTaskAC = (title: string) =>\r\n    ({type: 'ADD-TASK', title} as const)\r\nexport const updateTaskAC = (taskId: string, checked: boolean) =>\r\n    ({type: 'UPDATE-TASK', taskId, checked} as const)\r\nexport const searchTaskAC = (title: string) =>\r\n    ({type: 'FIND-TASK', title} as const)\r\nexport const setTasksAC = () =>\r\n    ({type: 'SET-TASKS'} as const)\r\n\r\n// types\r\nexport type TasksStateType = typeof initialState\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof searchTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addTask: (title: string) => void\r\n    filteredTasks: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        props.filteredTasks(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div style={{\r\n        fontSize: '28px'\r\n    }\r\n    }>\r\n        <TextField\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label=\"Title\"\r\n            helperText={error}\r\n        />\r\n        <IconButton\r\n            color=\"inherit\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useState} from 'react'\r\nimport {Task} from \"./Tasks/Task\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {addTaskAC, removeTaskAC, searchTaskAC, updateTaskAC} from \"../../store/tasks-reducer\";\r\nimport {AddItemForm} from '../../Components/AddItemForm';\r\nimport S from './Todolist.module.css'\r\n\r\n\r\nexport const Todolist = React.memo(function () {\r\n\r\n    const [isActive, setIsActive] = useState(false)\r\n\r\n    const tasks = useSelector((state: AppRootStateType) => state.tasks.activeTasks)\r\n    const allTasks = useSelector((state: AppRootStateType) => state.tasks.allTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const filteredTasks = useCallback((searchingValue: string) => {\r\n        setIsActive(false)\r\n        dispatch(searchTaskAC(searchingValue))\r\n    }, [dispatch])\r\n    const addTask = useCallback(function (title: string) {\r\n        setIsActive(true)\r\n        dispatch(addTaskAC(title))\r\n    }, [dispatch])\r\n    const removeTask = useCallback(function (id: string) {\r\n        dispatch(removeTaskAC(id))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback(function (id: string, checked: boolean) {\r\n        dispatch(updateTaskAC(id, checked))\r\n    }, [dispatch])\r\n\r\n    return <>\r\n        <div className={S.AddItemFormBox}>\r\n            <AddItemForm\r\n                addTask={addTask}\r\n                filteredTasks={filteredTasks}\r\n            />\r\n        </div>\r\n        <div className={S.tasksBox}>\r\n            {isActive ?\r\n\r\n                allTasks.map((t, i) => {\r\n                    return <div key={i}>\r\n                        <Task\r\n                            id={t.id}\r\n                            title={t.title}\r\n                            checked={t.checked}\r\n                            changeTaskStatus={changeStatus}\r\n                            removeTask={removeTask}\r\n                        />\r\n                    </div>\r\n                })\r\n                : tasks.map((t, i) => {\r\n                    return <div key={i}>\r\n                        <Task\r\n                            id={t.id}\r\n                            title={t.title}\r\n                            checked={t.checked}\r\n                            changeTaskStatus={changeStatus}\r\n                            removeTask={removeTask}\r\n                        />\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    </>\r\n})\r\n\r\n\r\n","import {Paper} from '@material-ui/core';\nimport React from 'react';\nimport {Todolist} from '../TodoListsList/TodoList/Todolist';\nimport S from './App.module.css'\n\nfunction App() {\n\n    return (\n        <div className={S.todoListContainer}>\n            <div>\n                <Paper style={{\n                    padding: '20px',\n                    borderRadius: '15px',\n                    background: 'linear-gradient(315deg, rgb(211 56 213), rgb(49 254 188))'\n                }} elevation={10}>\n                    <Todolist/>\n                </Paper>\n            </div>\n        </div>\n    );\n}\n\nexport default App\n","import {combineReducers, createStore} from 'redux'\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer\r\n})\r\nexport const store = createStore(rootReducer);\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n        <App/>\n        </Provider>\n    </React.StrictMode>,\ndocument.getElementById('root')\n)\n;\n\n"],"sourceRoot":""}